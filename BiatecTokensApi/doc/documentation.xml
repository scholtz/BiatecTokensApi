<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BiatecTokensApi</name>
    </assembly>
    <members>
        <member name="T:BiatecTokensApi.Configuration.EVMBlockchainConfig">
            <summary>
            Represents the configuration settings for an EVM-compatible blockchain, such as Base Mainnet or Base Sepolia
            Testnet.
            </summary>
            <remarks>This class provides the necessary parameters to interact with an EVM-compatible blockchain,
            including the RPC URL, chain ID, and gas limit. It is typically used to configure blockchain-related operations
            or services.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Configuration.EVMBlockchainConfig.RpcUrl">
            <summary>
            RPC URL for the Base blockchain (can be mainnet or testnet)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.EVMBlockchainConfig.ChainId">
            <summary>
            Chain ID for Base Mainnet (8453) or Base Sepolia Testnet (84532), or others
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.EVMBlockchainConfig.GasLimit">
            <summary>
            Gas limit for token deployment
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Configuration.EVMChains">
            <summary>
            Represents a collection of blockchain configurations for supported Ethereum Virtual Machine (EVM) chains.
            </summary>
            <remarks>This class provides a centralized way to manage and access configurations for multiple
            EVM-compatible blockchains. Each configuration in the <see cref="P:BiatecTokensApi.Configuration.EVMChains.Chains"/> property defines the settings and
            parameters for a specific chain.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Configuration.EVMChains.Chains">
            <summary>
            Gets or sets the collection of blockchain configurations for supported EVM chains.
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Configuration.IPFSConfig">
            <summary>
            Configuration for IPFS repository operations
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.IPFSConfig.ApiUrl">
            <summary>
            IPFS API endpoint for storing data
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.IPFSConfig.GatewayUrl">
            <summary>
            IPFS gateway URL for fetching data
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.IPFSConfig.Username">
            <summary>
            Username for basic authentication
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.IPFSConfig.Password">
            <summary>
            Password for basic authentication
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.IPFSConfig.TimeoutSeconds">
            <summary>
            Timeout for HTTP requests in seconds
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.IPFSConfig.MaxFileSizeBytes">
            <summary>
            Maximum file size allowed for upload in bytes (default: 10MB)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Configuration.IPFSConfig.ValidateContentHash">
            <summary>
            Whether to validate content hashes when retrieving data
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Controllers.TokenController">
            <summary>
            Provides endpoints for creating and managing various types of tokens, including ERC-20, ARC3 fungible tokens,
            ARC3 non-fungible tokens (NFTs), and ARC200 tokens.
            </summary>
            <remarks>This controller includes methods for deploying and managing tokens on different blockchain
            networks. It supports advanced token standards such as ERC-20 and ARC3, offering features like minting, burning,
            pausing, and metadata validation. Each endpoint validates the input request, interacts with the corresponding
            token service, and returns appropriate responses based on the operation's success or failure.</remarks>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.#ctor(BiatecTokensApi.Services.Interface.IERC20TokenService,BiatecTokensApi.Services.Interface.IARC3TokenService,BiatecTokensApi.Services.Interface.IASATokenService,BiatecTokensApi.Services.Interface.IARC200TokenService,Microsoft.Extensions.Logging.ILogger{BiatecTokensApi.Controllers.TokenController})">
            <summary>
            Initializes a new instance of the <see cref="T:BiatecTokensApi.Controllers.TokenController"/> class.
            </summary>
            <param name="erc20TokenService">The service used to interact with ERC-20 tokens.</param>
            <param name="arc3TokenService">The service used to interact with ARC-3 tokens.</param>
            <param name="asaTokenService">The service used to interact with ASA tokens.</param>
            <param name="arc200TokenService">The service used to interact with ARC-200 tokens</param>
            <param name="logger">The logger instance used to log diagnostic and operational information.</param>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.DeployToken(BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest)">
            <summary>
            Deploys a new BiatecToken on the Base blockchain.
            BiatecToken is an advanced ERC20 token with additional features:
            - Minting capabilities (owner and authorized minters)
            - Burning capabilities (burn and burnFrom)
            - Pausable functionality (owner can pause/unpause transfers)
            - Ownable (ownership transfer functionality)
            The deployer automatically becomes the owner and first minter.
            The initial token supply can be sent to a specified address or the deployer.
            </summary>
            <param name="request">Token deployment parameters including optional initial supply receiver</param>
            <returns>Deployment result with contract address and initial supply receiver</returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.CreateASAToken(BiatecTokensApi.Models.ARC3.Request.ARC3FungibleTokenDeploymentRequest)">
            <summary>
            Creates an ARC3 fungible token on the specified network.
            </summary>
            <remarks>This method processes a request to deploy an ARC3 fungible token using the provided
            deployment parameters. It validates the request model and interacts with the token service to create the
            token. If the token creation is successful, the method returns a response containing the asset ID and
            transaction details. If the creation fails, an error response is returned.</remarks>
            <param name="request">The deployment request containing the parameters required to create the ARC3 fungible token. This includes
            details such as the network, token properties, and other configuration settings.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> representing the result of the operation. Returns a 200 OK response with an
            <see cref="T:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse"/> if the token is created successfully. Returns a 400 Bad Request
            response if the request model is invalid. Returns a 500 Internal Server Error response if an error occurs
            during token creation.</returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.CreateASANFT(BiatecTokensApi.Models.ASA.Request.ASANonFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ASA NFT (Algorand Standard Asset Non-Fungible Token) based on the provided deployment request. It creates basic ASA token with quantity of 1. If you want to serve also the picture for the NFT token, use the ARC3 NFT standard instead.
            </summary>
            <remarks>This method validates the input request and attempts to create an ASA NFT using the
            provided parameters.  If the operation is successful, the response includes details such as the asset ID and
            transaction hash.  In case of failure, appropriate error information is returned.</remarks>
            <param name="request">The deployment request containing the necessary parameters for creating the ASA NFT,  including network
            details and token-specific configurations. This parameter cannot be null.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> representing the result of the operation.  Returns a 200 OK response with an
            <see cref="T:BiatecTokensApi.Models.ARC3.Response.ASATokenDeploymentResponse"/> if the token is created successfully.  Returns a 400 Bad Request
            response if the request is invalid.  Returns a 500 Internal Server Error response if an unexpected error
            occurs during the operation.</returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.CreateASAFNFT(BiatecTokensApi.Models.ASA.Request.ASAFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ASA NFT (Algorand Standard Asset Non-Fungible Token) based on the provided deployment request. It creates basic ASA token with quantity of 1. If you want to serve also the picture for the NFT token, use the ARC3 NFT standard instead.
            </summary>
            <remarks>This method validates the input request and attempts to create an ASA NFT using the
            provided parameters.  If the operation is successful, the response includes details such as the asset ID and
            transaction hash.  In case of failure, appropriate error information is returned.</remarks>
            <param name="request">The deployment request containing the necessary parameters for creating the ASA NFT,  including network
            details and token-specific configurations. This parameter cannot be null.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> representing the result of the operation.  Returns a 200 OK response with an
            <see cref="T:BiatecTokensApi.Models.ARC3.Response.ASATokenDeploymentResponse"/> if the token is created successfully.  Returns a 400 Bad Request
            response if the request is invalid.  Returns a 500 Internal Server Error response if an unexpected error
            occurs during the operation.</returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.CreateARC3FungibleToken(BiatecTokensApi.Models.ARC3.Request.ARC3FungibleTokenDeploymentRequest)">
            <summary>
            Creates a new ARC3 Fungible Token on the Algorand blockchain.
            ARC3 tokens are Algorand Standard Assets (ASAs) that comply with the ARC3 metadata standard:
            - Support for rich metadata including images, descriptions, and properties
            - IPFS-based metadata storage with integrity verification
            - Localization support for international use
            - Optional management features (freeze, clawback, reserve)
            The creator becomes the initial manager and can configure additional roles.
            </summary>
            <param name="request">ARC3 token creation parameters including metadata</param>
            <returns>Creation result with asset ID and transaction details</returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.CreateARC3NFT(BiatecTokensApi.Models.ARC3.Request.ARC3NonFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ARC3-compliant non-fungible token (NFT) on the specified network.
            </summary>
            <remarks>This method accepts a deployment request containing the necessary parameters to
            create an ARC3 NFT. It validates the request model and interacts with the token service to perform the
            creation. If the operation is successful, the method returns the details of the created token, including the
            asset ID and transaction hash. In case of failure, it returns an appropriate error response.</remarks>
            <param name="request">The deployment request containing the parameters required to create the ARC3 NFT. This includes details such
            as the network, metadata, and other token-specific configurations.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the operation: <list type="bullet">
            <item><description>A 200 OK response with an <see cref="T:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse"/> if the token is
            created successfully.</description></item> <item><description>A 400 Bad Request response if the request
            model is invalid.</description></item> <item><description>A 500 Internal Server Error response if an
            unexpected error occurs during token creation.</description></item> </list></returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.CreateARC3FractionalNFT(BiatecTokensApi.Models.ARC3.Request.ARC3NonFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ARC3 fractional non-fungible token (FNFT) based on the provided deployment request.
            </summary>
            <remarks>This method processes the deployment request for an ARC3 FNFT and returns the result
            of the operation. The request must include all required parameters for token creation, and the model state
            must be valid. If the operation succeeds, the response contains details about the created token, including
            the asset ID and transaction hash. If the operation fails, an appropriate error response is
            returned.</remarks>
            <param name="request">The deployment request containing the necessary parameters for creating the ARC3 fractional token. This must
            be a valid <see cref="T:BiatecTokensApi.Models.ARC3.Request.ARC3NonFungibleTokenDeploymentRequest"/> object.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the operation: - A 200 OK response with an <see
            cref="T:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse"/> if the token is successfully created. - A 400 Bad Request response if
            the model state is invalid. - A 500 Internal Server Error response if an error occurs during token creation.</returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.ARC200MintableTokenDeploymentRequest(BiatecTokensApi.Models.ARC200.Request.ARC200MintableTokenDeploymentRequest)">
            <summary>
            Creates a new ARC200 mintable token based on the provided deployment request.
            </summary>
            <remarks>This method validates the input request and attempts to create an ARC200 mintable
            token using the provided details. If the operation succeeds, the response includes the asset ID and
            transaction details. In case of failure, an appropriate error response is returned.</remarks>
            <param name="request">The deployment request containing the configuration details for the ARC200 mintable token. This includes
            information such as the token name, symbol, initial supply, and network.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the token creation operation: - A 200 OK response
            with an <see cref="T:BiatecTokensApi.Models.ARC200.Response.ARC200TokenDeploymentResponse"/> if the token is successfully created. - A 400 Bad Request
            response if the request is invalid. - A 500 Internal Server Error response if an unexpected error occurs
            during the operation.</returns>
        </member>
        <member name="M:BiatecTokensApi.Controllers.TokenController.CreateARC200Preminted(BiatecTokensApi.Models.ARC200.Request.ARC200PremintedTokenDeploymentRequest)">
            <summary>
            Creates a new ARC200 preminted fungible token based on the provided deployment request.
            </summary>
            <remarks>This method validates the input request and attempts to create an ARC200 preminted
            token using the provided details. If the operation is successful, the response includes the asset ID and
            transaction details. If the operation fails, an appropriate error response is returned.</remarks>
            <param name="request">The deployment request containing the details required to create the ARC200 preminted token, including
            network information and token parameters. This parameter cannot be null and must pass model validation.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the token creation operation. Returns a 200 OK
            response with an <see cref="T:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse"/> if the token is created successfully, a 400 Bad
            Request response if the request is invalid, or a 500 Internal Server Error response if an unexpected error
            occurs.</returns>
        </member>
        <member name="T:BiatecTokensApi.Models.AppConfiguration">
            <summary>
            Represents the configuration settings for an application, including account-related information.
            </summary>
            <remarks>This class is typically used to store and manage application-level configuration
            values.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.AppConfiguration.Account">
            <summary>
            Deployer's account
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC200.Request.ARC200MintableTokenDeploymentRequest">
            <summary>
            Represents a request to deploy an ERC-20 token with mintable functionality.
            </summary>
            <remarks>This class extends <see cref="T:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest"/> to include the mintable
            property, indicating that the deployed token will support minting of additional tokens after
            deployment.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200MintableTokenDeploymentRequest.IsMintable">
            <summary>
            Gets a value indicating whether the item can be minted.
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200MintableTokenDeploymentRequest.Cap">
            <summary>
            Cap of tokens (will be multiplied by decimals)
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC200.Request.ARC200PremintedTokenDeploymentRequest">
            <summary>
            Represents a request to deploy a non-mintable ARC200 token contract on the blockchain.
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200PremintedTokenDeploymentRequest.IsMintable">
            <summary>
            Gets a value indicating whether the item can be minted.
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest">
            <summary>
            Represents a request to deploy an ARC200 token contract on the blockchain.
            </summary>
            <remarks>This class encapsulates the necessary parameters for deploying an ARC200 token, including the
            token's name, symbol, initial supply, and other optional configuration details. Ensure all required properties
            are set before using this request.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest.Name">
            <summary>
            The name of the ARC200 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest.Symbol">
            <summary>
            The symbol of the ARC200 token (ticker)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest.InitialSupply">
            <summary>
            Initial supply of tokens (will be multiplied by decimals)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest.Decimals">
            <summary>
            Number of decimals for the token (typically 18)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest.InitialSupplyReceiver">
            <summary>
            Address that will receive the initial token supply. 
            If not specified, the deployer address will be used.
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest.Network">
            <summary>
            Algorand network to deploy to (mainnet-v1.0, testnet-v1.0, betanet-v1.0, voimain-v1.0, aramidmain-v1.0)
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC200.Response.ARC200TokenDeploymentResponse">
            <summary>
            Represents the response received after deploying an ERC-20 token contract.
            </summary>
            <remarks>This response includes details about the deployed token contract, such as its
            address.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC200.Response.ARC200TokenDeploymentResponse.AppId">
            <summary>
            Deployed token contract app id
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.ARC3TokenInfo">
            <summary>
            Information about the created ARC3 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenInfo.Metadata">
            <summary>
            Gets or sets the ARC3 token metadata associated with this instance.
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.ARC3TokenLocalization">
            <summary>
            Localization information for ARC3 token metadata
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenLocalization.Uri">
            <summary>
            The URI pattern to fetch localized data from. This URI should contain the substring `{locale}`
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenLocalization.Default">
            <summary>
            The locale of the default data within the base JSON
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenLocalization.Locales">
            <summary>
            The list of locales for which data is available
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenLocalization.Integrity">
            <summary>
            The SHA-256 digests of the localized JSON files (except the default one)
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata">
            <summary>
            ARC3 compliant token metadata structure
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.Name">
            <summary>
            Identifies the asset to which this token represents
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.Decimals">
            <summary>
            The number of decimal places that the token amount should display
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.Description">
            <summary>
            Describes the asset to which this token represents
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.Image">
            <summary>
            A URI pointing to a file with MIME type image/* representing the asset
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.ImageIntegrity">
            <summary>
            The SHA-256 digest of the file pointed by the URI image
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.ImageMimetype">
            <summary>
            The MIME type of the file pointed by the URI image. MUST be of the form 'image/*'
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.BackgroundColor">
            <summary>
            Background color to display the asset. MUST be a six-character hexadecimal without a pre-pended #
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.ExternalUrl">
            <summary>
            A URI pointing to an external website presenting the asset
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.ExternalUrlIntegrity">
            <summary>
            The SHA-256 digest of the file pointed by the URI external_url
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.ExternalUrlMimetype">
            <summary>
            The MIME type of the file pointed by the URI external_url
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.AnimationUrl">
            <summary>
            A URI pointing to a multi-media file representing the asset
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.AnimationUrlIntegrity">
            <summary>
            The SHA-256 digest of the file pointed by the URI animation_url
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.AnimationUrlMimetype">
            <summary>
            The MIME type of the file pointed by the URI animation_url
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.Properties">
            <summary>
            Arbitrary properties (also called attributes). Values may be strings, numbers, object or arrays
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.ExtraMetadata">
            <summary>
            Extra metadata in base64
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.ARC3TokenMetadata.Localization">
            <summary>
            Localization information for the metadata
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.Request.ARC3FractionalNonFungibleTokenDeploymentRequest">
            <summary>
            Represents a request to deploy an ARC3-compliant non-fungible token (NFT).
            </summary>
            <remarks>This class encapsulates the necessary metadata required for deploying an ARC3-compliant NFT.
            The metadata must adhere to the ARC3 standard to ensure compatibility with supported platforms and
            tools.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.Request.ARC3FractionalNonFungibleTokenDeploymentRequest.Metadata">
            <summary>
            ARC3 compliant metadata for the token
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.Request.ARC3FungibleTokenDeploymentRequest">
            <summary>
            Request model for creating an ARC3 Fungible Token on Algorand
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.Request.ARC3FungibleTokenDeploymentRequest.Metadata">
            <summary>
            ARC3 compliant metadata for the token
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.Request.ARC3NonFungibleTokenDeploymentRequest">
            <summary>
            Represents a request to deploy an ARC3-compliant non-fungible token (NFT).
            </summary>
            <remarks>This class encapsulates the necessary metadata required for deploying an ARC3-compliant NFT.
            The metadata must adhere to the ARC3 standard to ensure compatibility with supported platforms and
            tools.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.Request.ARC3NonFungibleTokenDeploymentRequest.Metadata">
            <summary>
            ARC3 compliant metadata for the token
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.Request.IARC3TokenDeploymentRequest">
            <summary>
            Represents a request to deploy an ARC3 token.
            </summary>
            <remarks>This interface defines the contract for creating a deployment request for an ARC3 token. 
            Implementations of this interface should provide the necessary details required for the deployment
            process.</remarks>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse">
            <summary>
            Response model for ARC3 token deployment
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse.TokenInfo">
            <summary>
            Token configuration details
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse.MetadataUrl">
            <summary>
            Generated metadata URL if metadata was uploaded
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.Response.ARC3TokenDeploymentResponse.MetadataHash">
            <summary>
            Hash of the uploaded metadata
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ARC3.Response.ASATokenDeploymentResponse">
            <summary>
            Response model for ARC3 token deployment
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ARC3.Response.ASATokenDeploymentResponse.TokenInfo">
            <summary>
            Token configuration details
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ASA.ASATokenInfo">
            <summary>
            Information about the created ARC3 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.Id">
            <summary>
            Gets or sets the unique identifier for the ASA (Algorand Standard Asset).
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.Name">
            <summary>
            The name of the ARC3 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.UnitName">
            <summary>
            The unit name (symbol) of the ARC3 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.TotalSupply">
            <summary>
            Total supply of tokens
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.Decimals">
            <summary>
            Number of decimal places for the token (0-19)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.Url">
            <summary>
            Optional URL for token metadata
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.MetadataHash">
            <summary>
            Optional metadata hash (32 bytes)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.DefaultFrozen">
            <summary>
            Whether the asset can be frozen by the freeze address
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.ManagerAddress">
            <summary>
            Address that can manage the asset configuration (optional)
            If not provided, the creator will be the manager
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.ReserveAddress">
            <summary>
            Address that can reserve tokens (optional)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.FreezeAddress">
            <summary>
            Address that can freeze/unfreeze tokens (optional)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.ClawbackAddress">
            <summary>
            Address that can clawback tokens (optional)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.ASATokenInfo.Network">
            <summary>
            Gets or sets the name of the network configuration.
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest">
            <summary>
            Request model for creating an ARC3 Fungible Token on Algorand
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.Name">
            <summary>
            The name of the ARC3 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.UnitName">
            <summary>
            The unit name (symbol) of the ARC3 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.Url">
            <summary>
            Optional URL for token metadata
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.MetadataHash">
            <summary>
            Optional metadata hash (32 bytes)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.DefaultFrozen">
            <summary>
            Whether the asset can be frozen by the freeze address
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.ManagerAddress">
            <summary>
            Address that can manage the asset configuration (optional)
            If not provided, the creator will be the manager
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.ReserveAddress">
            <summary>
            Address that can reserve tokens (optional)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.FreezeAddress">
            <summary>
            Address that can freeze/unfreeze tokens (optional)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.ClawbackAddress">
            <summary>
            Address that can clawback tokens (optional)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest.Network">
            <summary>
            Algorand network to deploy to (mainnet-v1.0, testnet-v1.0, betanet-v1.0, voimain-v1.0, aramidmain-v1.0)
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ASA.Request.ASAFractionalNonFungibleTokenDeploymentRequest">
            <summary>
            Request model for creating a Fractional Non-Fungible Token on Algorand
            </summary>
            <remarks>
            This model extends the base token deployment request with additional properties specific to fractional non-fungible tokens.
            </remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASAFractionalNonFungibleTokenDeploymentRequest.TotalSupply">
            <summary>
            Total supply of tokens
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASAFractionalNonFungibleTokenDeploymentRequest.Decimals">
            <summary>
            Number of decimal places for the token (0-19)
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ASA.Request.ASAFungibleTokenDeploymentRequest">
            <summary>
            Request model for creating an ARC3 Fungible Token on Algorand
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASAFungibleTokenDeploymentRequest.TotalSupply">
            <summary>
            Total supply of tokens
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ASA.Request.ASAFungibleTokenDeploymentRequest.Decimals">
            <summary>
            Number of decimal places for the token (0-19)
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ASA.Request.ASANonFungibleTokenDeploymentRequest">
            <summary>
            Decimals is equal to 0 for non-fungible tokens. Total quantity is equal to 1.
            </summary>
            <remarks>
            This model extends the base token deployment request with additional properties specific to fractional non-fungible tokens.
            </remarks>
        </member>
        <member name="T:BiatecTokensApi.Models.AVM.AVMTokenDeploymentResponse">
            <summary>
            Represents the response of a token deployment operation in the AVM (Algorand Virtual Machine).
            </summary>
            <remarks>This class provides details about the outcome of a token deployment, including the
            transaction ID, asset ID, creator address, and deployment status. If the deployment fails, an error message is
            provided.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.AVM.AVMTokenDeploymentResponse.TransactionId">
            <summary>
            Transaction ID of the asset creation
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.AVM.AVMTokenDeploymentResponse.AssetId">
            <summary>
            Asset ID of the created token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.AVM.AVMTokenDeploymentResponse.CreatorAddress">
            <summary>
            Creator account address
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.AVM.AVMTokenDeploymentResponse.ConfirmedRound">
            <summary>
            Round number when the transaction was confirmed
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.BaseResponse">
            <summary>
            Base response model for token deployment operations
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.BaseResponse.ErrorMessage">
            <summary>
            Error message if deployment failed
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.BaseResponse.Success">
            <summary>
            Status of the deployment
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ERC20.Request.ERC20MintableTokenDeploymentRequest">
            <summary>
            Represents a request to deploy an ERC-20 token with mintable functionality.
            </summary>
            <remarks>This class extends <see cref="T:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest"/> to include the mintable
            property, indicating that the deployed token will support minting of additional tokens after
            deployment.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20MintableTokenDeploymentRequest.IsMintable">
            <summary>
            Gets a value indicating whether the item can be minted.
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20MintableTokenDeploymentRequest.Cap">
            <summary>
            Cap of tokens (will be multiplied by decimals)
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ERC20.Request.ERC20PremintedTokenDeploymentRequest">
            <summary>
            Represents a request to deploy a non-mintable ERC20 token contract on the blockchain.
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20PremintedTokenDeploymentRequest.IsMintable">
            <summary>
            Gets a value indicating whether the item can be minted.
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest">
            <summary>
            Represents a request to deploy an ERC20 token contract on the blockchain.
            </summary>
            <remarks>This class encapsulates the necessary parameters for deploying an ERC20 token, including the
            token's name, symbol, initial supply, and other optional configuration details. Ensure all required properties
            are set before using this request.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest.Name">
            <summary>
            The name of the ERC20 token
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest.Symbol">
            <summary>
            The symbol of the ERC20 token (ticker)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest.InitialSupply">
            <summary>
            Initial supply of tokens (will be multiplied by decimals)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest.Decimals">
            <summary>
            Number of decimals for the token (typically 18)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest.InitialSupplyReceiver">
            <summary>
            Address that will receive the initial token supply. 
            If not specified, the deployer address will be used.
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest.ChainId">
            <summary>
            EVM chain id
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.ERC20.Response.ERC20TokenDeploymentResponse">
            <summary>
            Represents the response received after deploying an ERC-20 token contract.
            </summary>
            <remarks>This response includes details about the deployed token contract, such as its
            address.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.ERC20.Response.ERC20TokenDeploymentResponse.ContractAddress">
            <summary>
            Address of the deployed token contract
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.EVM.EVMTokenDeploymentResponse">
            <summary>
            Represents the response of an Ethereum Virtual Machine (EVM) token deployment operation.
            </summary>
            <remarks>This class encapsulates the details of a token deployment, including the transaction hash, 
            the deployed contract address, the status of the deployment, and any error messages if the  deployment failed.
            It also provides information about the address that received the initial  token supply.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.EVM.EVMTokenDeploymentResponse.TransactionHash">
            <summary>
            Transaction hash of the deployment
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.IPFSUploadResponse">
            <summary>
            Response from IPFS API when uploading content
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadResponse.Hash">
            <summary>
            Content Identifier (CID) of the uploaded content
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadResponse.Sha256Hash">
            <summary>
            Gets or sets the SHA-256 hash value as a hexadecimal string.
            </summary>
            <remarks>The hash value is typically used for verifying data integrity for example in token creation.</remarks>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadResponse.Name">
            <summary>
            Name of the uploaded file
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadResponse.Size">
            <summary>
            Size of the uploaded content in bytes
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadResponse.Success">
            <summary>
            Whether the upload was successful
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadResponse.ErrorMessage">
            <summary>
            Error message if upload failed
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadResponse.GatewayUrl">
            <summary>
            Full IPFS gateway URL to access the content
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.IPFSUploadRequest">
            <summary>
            Request for uploading content to IPFS
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadRequest.Content">
            <summary>
            Content to upload as bytes
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadRequest.FileName">
            <summary>
            Optional filename for the content
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadRequest.ContentType">
            <summary>
            MIME type of the content
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSUploadRequest.Pin">
            <summary>
            Whether to pin the content to ensure it stays available
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.IPFSRetrieveResponse">
            <summary>
            Response when retrieving content from IPFS
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSRetrieveResponse.Content">
            <summary>
            Retrieved content as bytes
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSRetrieveResponse.ContentType">
            <summary>
            Content type of the retrieved data
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSRetrieveResponse.Size">
            <summary>
            Size of the retrieved content
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSRetrieveResponse.Success">
            <summary>
            Whether the retrieval was successful
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSRetrieveResponse.ErrorMessage">
            <summary>
            Error message if retrieval failed
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSRetrieveResponse.HashVerified">
            <summary>
            Hash integrity check result
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.IPFSContentInfo">
            <summary>
            IPFS content metadata
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSContentInfo.Hash">
            <summary>
            Content Identifier (CID)
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSContentInfo.Size">
            <summary>
            Content size in bytes
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSContentInfo.ContentType">
            <summary>
            Content type/MIME type
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSContentInfo.UploadedAt">
            <summary>
            When the content was uploaded
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSContentInfo.IsPinned">
            <summary>
            Whether the content is pinned
            </summary>
        </member>
        <member name="P:BiatecTokensApi.Models.IPFSContentInfo.GatewayUrl">
            <summary>
            Gateway URL to access the content
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Models.TokenType">
            <summary>
            Represents the various types of tokens supported by the system.
            </summary>
            <remarks>This enumeration categorizes tokens based on their characteristics, such as quantity,
            decimals,  and metadata standards. It includes support for both Algorand Standard Assets (ASA) and 
            Ethereum-based ERC20 tokens, with further distinctions for fungibility and metadata.</remarks>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ASA_FT">
            <summary>
            ASA where sum of quantity is not equal to 1
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ASA_NFT">
            <summary>
            ASA where quantity is equal to 1 and decimals is equal to 0
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ASA_FNFT">
            <summary>
            ASA where sum of quantity is equal to 1, but decimals are not 0        
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ARC3_FT">
            <summary>
            ASA_FT with ARC3 metadata pointing to json file with metadata
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ARC3_NFT">
            <summary>
            ASA_NFT with ARC3 metadata pointing to json file with metadata
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ARC3_FNFT">
            <summary>
            ASA_FNFT with ARC3 metadata pointing to json file with metadata
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ARC200_Mintable">
            <summary>
            AVM ARC200 token which supports minting functionality.
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ARC200_Preminted">
            <summary>
            AVM ARC200 token which is fully preminted.
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ERC20_Mintable">
            <summary>
            Represents an ERC20 token that supports minting functionality.
            </summary>
        </member>
        <member name="F:BiatecTokensApi.Models.TokenType.ERC20_Preminted">
            <summary>
            Represents an ERC20 token which is fully preminted.
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Program">
            <summary>
            Configures and runs the web application for the Biatec Tokens API.
            </summary>
            <remarks>This class sets up the necessary services, middleware, and configurations for the API,
            including controllers, Swagger/OpenAPI documentation, authentication, and token services. It is the entry point
            of the application and is responsible for building and starting the web host.</remarks>
        </member>
        <member name="M:BiatecTokensApi.Program.Main(System.String[])">
            <summary>
            Configures and runs the web application.
            </summary>
            <remarks>This method sets up the web application by configuring services, middleware, and
            endpoints. It initializes Swagger for API documentation, configures authentication using Algorand, and
            registers various services and repositories required for the application. The method then builds and runs
            the application.</remarks>
            <param name="args">The command-line arguments used to configure the application.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:BiatecTokensApi.Repositories.IIPFSRepository">
            <summary>
            Interface for IPFS repository operations
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.UploadAsync(BiatecTokensApi.Models.IPFSUploadRequest)">
            <summary>
            Uploads content to IPFS
            </summary>
            <param name="request">Upload request with content and metadata</param>
            <returns>Upload response with CID and gateway URL</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.UploadTextAsync(System.String,System.String,System.String)">
            <summary>
            Uploads text content to IPFS
            </summary>
            <param name="content">Text content to upload</param>
            <param name="fileName">Optional filename</param>
            <param name="contentType">Content type (default: text/plain)</param>
            <returns>Upload response with CID and gateway URL</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.UploadJsonAsync(System.String,System.String)">
            <summary>
            Uploads JSON content to IPFS
            </summary>
            <param name="jsonContent">JSON content as string</param>
            <param name="fileName">Optional filename</param>
            <returns>Upload response with CID and gateway URL</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.UploadObjectAsync``1(``0,System.String)">
            <summary>
            Uploads an object as JSON to IPFS
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="obj">Object to serialize and upload</param>
            <param name="fileName">Optional filename</param>
            <returns>Upload response with CID and gateway URL</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.RetrieveAsync(System.String)">
            <summary>
            Retrieves content from IPFS by CID
            </summary>
            <param name="cid">Content Identifier</param>
            <returns>Retrieved content and metadata</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.RetrieveTextAsync(System.String)">
            <summary>
            Retrieves text content from IPFS by CID
            </summary>
            <param name="cid">Content Identifier</param>
            <returns>Text content as string</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.RetrieveObjectAsync``1(System.String)">
            <summary>
            Retrieves and deserializes JSON content from IPFS
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="cid">Content Identifier</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.GetContentInfoAsync(System.String)">
            <summary>
            Gets information about content stored in IPFS
            </summary>
            <param name="cid">Content Identifier</param>
            <returns>Content information</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.ExistsAsync(System.String)">
            <summary>
            Checks if content exists in IPFS
            </summary>
            <param name="cid">Content Identifier</param>
            <returns>True if content exists and is accessible</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.PinAsync(System.String)">
            <summary>
            Pins content in IPFS to ensure it stays available
            </summary>
            <param name="cid">Content Identifier</param>
            <returns>True if pinning was successful</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IIPFSRepository.UnpinAsync(System.String)">
            <summary>
            Unpins content from IPFS
            </summary>
            <param name="cid">Content Identifier</param>
            <returns>True if unpinning was successful</returns>
        </member>
        <member name="T:BiatecTokensApi.Repositories.IPFSRepository">
            <summary>
            Repository for IPFS operations using Biatec IPFS API
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.UploadAsync(BiatecTokensApi.Models.IPFSUploadRequest)">
            <summary>
            Uploads content to IPFS
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.ParseNDJsonResponse(System.String)">
            <summary>
            Parses NDJSON (newline-delimited JSON) response from IPFS API
            </summary>
            <param name="ndjsonContent">NDJSON content from IPFS API</param>
            <returns>The file upload response (first line that contains the uploaded file info)</returns>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.UploadTextAsync(System.String,System.String,System.String)">
            <summary>
            Uploads text content to IPFS
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.UploadJsonAsync(System.String,System.String)">
            <summary>
            Uploads JSON content to IPFS
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.UploadObjectAsync``1(``0,System.String)">
            <summary>
            Uploads an object as JSON to IPFS
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.RetrieveAsync(System.String)">
            <summary>
            Retrieves content from IPFS by CID
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.RetrieveTextAsync(System.String)">
            <summary>
            Retrieves text content from IPFS by CID
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.RetrieveObjectAsync``1(System.String)">
            <summary>
            Retrieves and deserializes JSON content from IPFS
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.GetContentInfoAsync(System.String)">
            <summary>
            Gets information about content stored in IPFS
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.ExistsAsync(System.String)">
            <summary>
            Checks if content exists in IPFS
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.PinAsync(System.String)">
            <summary>
            Pins content in IPFS to ensure it stays available
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Repositories.IPFSRepository.UnpinAsync(System.String)">
            <summary>
            Unpins content from IPFS
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Repositories.IPFSRepository.IPFSApiResponse">
            <summary>
            Response model for IPFS API
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Services.ARC200TokenService">
            <summary>
            Provides functionality for deploying and interacting with ERC-20 token contracts on blockchain networks.
            </summary>
            <remarks>The <see cref="T:BiatecTokensApi.Services.ARC200TokenService"/> class is designed to facilitate the deployment of ERC-20
            token contracts and manage interactions with the BiatecToken smart contract. It loads the ABI and bytecode for
            the BiatecToken contract from a JSON file and uses this information to deploy contracts and perform related
            operations.  This service relies on blockchain configuration settings and application-specific settings provided
            via dependency injection. It also logs relevant information and errors during operations.  Ensure that the
            required ABI and bytecode file ("BiatecToken.json") is present in the "ABI" directory under the application's
            base directory.</remarks>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC200TokenService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{AlgorandAuthenticationV2.AlgorandAuthenticationOptionsV2},Microsoft.Extensions.Options.IOptionsMonitor{BiatecTokensApi.Models.AppConfiguration},Microsoft.Extensions.Logging.ILogger{BiatecTokensApi.Services.ARC200TokenService})">
            <summary>
            Initializes a new instance of the <see cref="T:BiatecTokensApi.Services.ARC200TokenService"/> class,  loading the ABI and bytecode for
            the BiatecToken contract and configuring the service.
            </summary>
            <remarks>This constructor reads the ABI and bytecode for the BiatecToken contract from a JSON
            file  located in the "ABI" directory under the application's base directory. The loaded ABI and  bytecode
            are used to interact with the BiatecToken smart contract. Ensure that the  "BiatecToken.json" file is
            present and correctly formatted in the expected location.</remarks>
            <param name="config">The configuration monitor for blockchain-related settings.</param>
            <param name="appConfig">The configuration monitor for application-specific settings.</param>
            <param name="logger">The logger used to log information and errors for this service.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the BiatecToken contract bytecode is not found in the ABI JSON file.</exception>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC200TokenService.ValidateRequest(BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Validates the deployment request for an ARC200 token based on the specified token type.
            </summary>
            <param name="request"></param>
            <param name="tokenType"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC200TokenService.GetAlgod(System.String)">
            <summary>
            
            </summary>
            <param name="network"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC200TokenService.CreateARC200TokenAsync(BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Deploys an ERC-20 token contract to the specified blockchain network.
            </summary>
            <remarks>This method deploys an ERC-20 token contract using the provided deployment
            parameters. The initial supply is allocated to the specified receiver address, or to the deployer's address
            if no receiver is provided. The method handles exceptions and logs relevant information about the deployment
            process.</remarks>
            <param name="request">The deployment request containing the token details, such as name, symbol, decimals, initial supply, and the
            blockchain configuration (e.g., chain ID and RPC URL).</param>
            <param name="tokenType">Token type</param>
            <returns>A <see cref="T:BiatecTokensApi.Models.ARC200.Response.ARC200TokenDeploymentResponse"/> containing the deployment result, including the contract
            address, transaction hash, and success status. If the deployment fails, the response includes an error
            message.</returns>
        </member>
        <member name="T:BiatecTokensApi.Services.ARC3TokenService">
            <summary>
            Service for creating and managing ARC3 Fungible Tokens on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC3TokenService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{AlgorandAuthenticationV2.AlgorandAuthenticationOptionsV2},Microsoft.Extensions.Logging.ILogger{BiatecTokensApi.Services.ARC3TokenService},BiatecTokensApi.Repositories.IIPFSRepository,BiatecTokensApi.Services.ASATokenService)">
            <summary>
            Initializes a new instance of the <see cref="T:BiatecTokensApi.Services.ARC3TokenService"/> class, configuring it to interact
            with Algorand nodes and IPFS repositories based on the provided options.
            </summary>
            <remarks>During initialization, the service attempts to connect to each allowed Algorand
            network specified in the configuration. For each network, it validates the connection by retrieving
            transaction parameters and logs the connection status. If a connection to any network fails, an exception is
            thrown, and the service cannot be initialized.</remarks>
            <param name="config">A monitor for <see cref="T:AlgorandAuthenticationV2.AlgorandAuthenticationOptionsV2"/> that provides configuration settings, including
            allowed networks and authentication details for connecting to Algorand nodes.</param>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance used for logging information, warnings, and errors related
            to the service's operations.</param>
            <param name="ipfsRepository">An implementation of <see cref="T:BiatecTokensApi.Repositories.IIPFSRepository"/> used to interact with IPFS for managing decentralized
            file storage.</param>
            <param name="asaTokenService">Token service to create ASAs</param>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC3TokenService.CreateARC3TokenAsync(BiatecTokensApi.Models.ARC3.Request.IARC3TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Creates an ARC3 fungible token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC3TokenService.CreateARC3FNFTTokenAsync(BiatecTokensApi.Models.ARC3.Request.ARC3FractionalNonFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ARC3 fractional non fungible token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC3TokenService.CreateARC3FTTokenAsync(BiatecTokensApi.Models.ARC3.Request.ARC3FungibleTokenDeploymentRequest)">
            <summary>
            Creates an ARC3 fungible token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC3TokenService.CreateARC3NFTTokenAsync(BiatecTokensApi.Models.ARC3.Request.ARC3NonFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ARC3 fungible token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC3TokenService.UploadMetadataAsync(BiatecTokensApi.Models.ARC3.ARC3TokenMetadata)">
            <summary>
            Uploads ARC3 metadata to IPFS and returns the URL and hash
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ARC3TokenService.ValidateMetadata(BiatecTokensApi.Models.ARC3.ARC3TokenMetadata)">
            <summary>
            Validates ARC3 metadata structure
            </summary>
        </member>
        <member name="T:BiatecTokensApi.Services.ASATokenService">
            <summary>
            Service for creating and managing ARC3 Fungible Tokens on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{AlgorandAuthenticationV2.AlgorandAuthenticationOptionsV2},Microsoft.Extensions.Options.IOptionsMonitor{BiatecTokensApi.Models.AppConfiguration},Microsoft.Extensions.Logging.ILogger{BiatecTokensApi.Services.ARC3TokenService})">
            <summary>
            Initializes a new instance of the <see cref="T:BiatecTokensApi.Services.ARC3TokenService"/> class, configuring it to interact
            with Algorand nodes and IPFS repositories based on the provided options.
            </summary>
            <remarks>During initialization, the service attempts to connect to each allowed Algorand
            network specified in the configuration. For each network, it validates the connection by retrieving
            transaction parameters and logs the connection status. If a connection to any network fails, an exception is
            thrown, and the service cannot be initialized.</remarks>
            <param name="config">A monitor for <see cref="T:AlgorandAuthenticationV2.AlgorandAuthenticationOptionsV2"/> that provides configuration settings, including
            allowed networks and authentication details for connecting to Algorand nodes.</param>
            <param name="appConfig"></param>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance used for logging information, warnings, and errors related
            to the service's operations.</param>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.CreateASATokenAsync(BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Creates an ARC3 fungible token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.CreateFNFTPublicAsync(BiatecTokensApi.Models.ASA.Request.ASAFractionalNonFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ASA fractional nft token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.CreateFTPublicAsync(BiatecTokensApi.Models.ASA.Request.ASAFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ASA fungible token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.CreateNFTPublicAsync(BiatecTokensApi.Models.ASA.Request.ASANonFungibleTokenDeploymentRequest)">
            <summary>
            Creates an ASA non fungible token on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.CreateFTAsync(BiatecTokensApi.Models.ASA.Request.ASAFungibleTokenDeploymentRequest)">
            <summary>
            Deploys a new Algorand Standard Asset (ASA) fungible token based on the provided deployment request.
            </summary>
            <remarks>This method creates a new fungible token on the specified Algorand network using the
            parameters provided in the request. It signs the transaction with the configured account and waits for the
            transaction to be confirmed.</remarks>
            <param name="request">The request containing parameters for the fungible token deployment, including name, unit name, total
            supply, and various addresses.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an <see
            cref="T:BiatecTokensApi.Models.ARC3.Response.ASATokenDeploymentResponse"/> with details of the deployed token, including asset ID and transaction
            ID.</returns>
            <exception cref="T:System.Exception">Thrown if the asset creation transaction or asset index cannot be parsed after creation.</exception>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.CreateNFTAsync(BiatecTokensApi.Models.ASA.Request.ASANonFungibleTokenDeploymentRequest)">
            <summary>
            Creates a non-fungible token (NFT) based on the specified deployment request.
            </summary>
            <remarks>This method configures the NFT with a total supply of 1 and 0 decimals, as required
            for non-fungible tokens. It uses the provided request details to set up the NFT's properties and delegates
            the creation to the <c>CreateFT</c> method.</remarks>
            <param name="request">The deployment request containing the parameters for the NFT, such as the manager address, metadata hash,
            and network details. The request must specify a total supply of 1 and 0 decimals to conform to NFT
            standards.</param>
            <returns>A task representing the asynchronous operation, with a result of type <see
            cref="T:BiatecTokensApi.Models.ARC3.Response.ASATokenDeploymentResponse"/> that contains the details of the deployed NFT.</returns>
        </member>
        <member name="M:BiatecTokensApi.Services.ASATokenService.CreateFNFTAsync(BiatecTokensApi.Models.ASA.Request.ASAFractionalNonFungibleTokenDeploymentRequest)">
            <summary>
            Initiates the deployment of a fractional non-fungible token (FNFT) based on the specified request
            parameters.
            </summary>
            <remarks>This method constructs a fungible token deployment request from the provided
            fractional non-fungible token request and initiates the deployment process.</remarks>
            <param name="request">The request containing the parameters for deploying the fractional non-fungible token, including addresses,
            metadata, and supply details.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the response of the FNFT
            deployment, including deployment details and status.</returns>
        </member>
        <member name="T:BiatecTokensApi.Services.ERC20TokenService">
            <summary>
            Provides functionality for deploying and interacting with ERC-20 token contracts on blockchain networks.
            </summary>
            <remarks>The <see cref="T:BiatecTokensApi.Services.ERC20TokenService"/> class is designed to facilitate the deployment of ERC-20
            token contracts and manage interactions with the BiatecToken smart contract. It loads the ABI and bytecode for
            the BiatecToken contract from a JSON file and uses this information to deploy contracts and perform related
            operations.  This service relies on blockchain configuration settings and application-specific settings provided
            via dependency injection. It also logs relevant information and errors during operations.  Ensure that the
            required ABI and bytecode file ("BiatecToken.json") is present in the "ABI" directory under the application's
            base directory.</remarks>
        </member>
        <member name="M:BiatecTokensApi.Services.ERC20TokenService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{BiatecTokensApi.Configuration.EVMChains},Microsoft.Extensions.Options.IOptionsMonitor{BiatecTokensApi.Models.AppConfiguration},Microsoft.Extensions.Logging.ILogger{BiatecTokensApi.Services.ERC20TokenService})">
            <summary>
            Initializes a new instance of the <see cref="T:BiatecTokensApi.Services.ERC20TokenService"/> class,  loading the ABI and bytecode for
            the BiatecToken contract and configuring the service.
            </summary>
            <remarks>This constructor reads the ABI and bytecode for the BiatecToken contract from a JSON
            file  located in the "ABI" directory under the application's base directory. The loaded ABI and  bytecode
            are used to interact with the BiatecToken smart contract. Ensure that the  "BiatecToken.json" file is
            present and correctly formatted in the expected location.</remarks>
            <param name="config">The configuration monitor for blockchain-related settings.</param>
            <param name="appConfig">The configuration monitor for application-specific settings.</param>
            <param name="logger">The logger used to log information and errors for this service.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the BiatecToken contract bytecode is not found in the ABI JSON file.</exception>
        </member>
        <member name="M:BiatecTokensApi.Services.ERC20TokenService.ValidateRequest(BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Validates the deployment request for an ERC20 token based on the specified token type.
            </summary>
            <param name="request"></param>
            <param name="tokenType"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:BiatecTokensApi.Services.ERC20TokenService.DeployERC20TokenAsync(BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Deploys an ERC-20 token contract to the specified blockchain network.
            </summary>
            <remarks>This method deploys an ERC-20 token contract using the provided deployment
            parameters. The initial supply is allocated to the specified receiver address, or to the deployer's address
            if no receiver is provided. The method handles exceptions and logs relevant information about the deployment
            process.</remarks>
            <param name="request">The deployment request containing the token details, such as name, symbol, decimals, initial supply, and the
            blockchain configuration (e.g., chain ID and RPC URL).</param>
            <param name="tokenType">Token type</param>
            <returns>A <see cref="T:BiatecTokensApi.Models.ERC20.Response.ERC20TokenDeploymentResponse"/> containing the deployment result, including the contract
            address, transaction hash, and success status. If the deployment fails, the response includes an error
            message.</returns>
        </member>
        <member name="T:BiatecTokensApi.Services.Interface.IARC200TokenService">
            <summary>
            Service interface for deploying ARC200 tokens on the blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.Interface.IARC200TokenService.CreateARC200TokenAsync(BiatecTokensApi.Models.ARC200.Request.ARC200TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Deploys an ARC200 token
            </summary>
            <param name="request">Token deployment parameters</param>
            <param name="tokenType">Token type</param>
            <returns>Response with transaction details</returns>
        </member>
        <member name="T:BiatecTokensApi.Services.Interface.IARC3TokenService">
            <summary>
            Interface for ARC3 Fungible Token Service operations on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.Interface.IARC3TokenService.CreateARC3TokenAsync(BiatecTokensApi.Models.ARC3.Request.IARC3TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Creates an ARC3 token on Algorand blockchain
            </summary>
            <param name="request">Token creation parameters</param>
            <param name="tokenType">Token type</param>
            <returns>Response with transaction details and asset ID</returns>
        </member>
        <member name="M:BiatecTokensApi.Services.Interface.IARC3TokenService.UploadMetadataAsync(BiatecTokensApi.Models.ARC3.ARC3TokenMetadata)">
            <summary>
            Uploads ARC3 metadata to IPFS and returns the URL and hash
            </summary>
            <param name="metadata">ARC3 metadata to upload</param>
            <returns>Tuple containing the IPFS URL and content hash</returns>
        </member>
        <member name="M:BiatecTokensApi.Services.Interface.IARC3TokenService.ValidateMetadata(BiatecTokensApi.Models.ARC3.ARC3TokenMetadata)">
            <summary>
            Validates ARC3 metadata structure
            </summary>
            <param name="metadata">Metadata to validate</param>
            <returns>True if valid, otherwise false with error message</returns>
        </member>
        <member name="T:BiatecTokensApi.Services.Interface.IASATokenService">
            <summary>
            Interface for ARC3 Fungible Token Service operations on Algorand blockchain
            </summary>
        </member>
        <member name="M:BiatecTokensApi.Services.Interface.IASATokenService.CreateASATokenAsync(BiatecTokensApi.Models.ASA.Request.ASABaseTokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Creates an ASA token on Algorand type blockchain
            </summary>
            <param name="request">Token creation parameters</param>
            <param name="tokenType">Token type</param>
            <returns>Response with transaction details and asset ID</returns>
        </member>
        <member name="T:BiatecTokensApi.Services.Interface.IERC20TokenService">
            <summary>
            Defines methods for interacting with and managing ERC20 tokens, including deployment functionality.
            </summary>
            <remarks>This interface provides an abstraction for operations related to ERC20 tokens, such as
            deploying new tokens. Implementations of this interface are expected to handle the underlying blockchain
            interactions required for these operations.</remarks>
        </member>
        <member name="M:BiatecTokensApi.Services.Interface.IERC20TokenService.DeployERC20TokenAsync(BiatecTokensApi.Models.ERC20.Request.ERC20TokenDeploymentRequest,BiatecTokensApi.Models.TokenType)">
            <summary>
            Deploys an ERC20 token
            </summary>
            <param name="request">Token deployment parameters</param>
            <param name="tokenType">Token type</param>
            <returns>Response with transaction details</returns>
        </member>
    </members>
</doc>
