using System.Numerics;
using BiatecTokensApi.Configuration;
using BiatecTokensApi.Models;
using Microsoft.Extensions.Options;
using Nethereum.Contracts;
using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;

namespace BiatecTokensApi.Services
{
    public class TokenService : ITokenService
    {
        private readonly BlockchainConfig _config;
        private readonly ILogger<TokenService> _logger;

        // Standard ERC20 token contract ABI (simplified)
        private const string ERC20_ABI = @"[{""inputs"":[{""internalType"":""string"",""name"":""name_"",""type"":""string""},{""internalType"":""string"",""name"":""symbol_"",""type"":""string""},{""internalType"":""uint256"",""name"":""initialSupply"",""type"":""uint256""},{""internalType"":""uint8"",""name"":""decimals_"",""type"":""uint8""}],""stateMutability"":""nonpayable"",""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":true,""internalType"":""address"",""name"":""owner"",""type"":""address""},{""indexed"":true,""internalType"":""address"",""name"":""spender"",""type"":""address""},{""indexed"":false,""internalType"":""uint256"",""name"":""value"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""internalType"":""address"",""name"":""from"",""type"":""address""},{""indexed"":true,""internalType"":""address"",""name"":""to"",""type"":""address""},{""indexed"":false,""internalType"":""uint256"",""name"":""value"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""inputs"":[{""internalType"":""address"",""name"":""owner"",""type"":""address""},{""internalType"":""address"",""name"":""spender"",""type"":""address""}],""name"":""allowance"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""spender"",""type"":""address""},{""internalType"":""uint256"",""name"":""amount"",""type"":""uint256""}],""name"":""approve"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""account"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""name"":""decimals"",""outputs"":[{""internalType"":""uint8"",""name"":"""",""type"":""uint8""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""spender"",""type"":""address""},{""internalType"":""uint256"",""name"":""subtractedValue"",""type"":""uint256""}],""name"":""decreaseAllowance"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""spender"",""type"":""address""},{""internalType"":""uint256"",""name"":""addedValue"",""type"":""uint256""}],""name"":""increaseAllowance"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""},{""inputs"":[],""name"":""name"",""outputs"":[{""internalType"":""string"",""name"":"""",""type"":""string""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""name"":""symbol"",""outputs"":[{""internalType"":""string"",""name"":"""",""type"":""string""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""name"":""totalSupply"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""to"",""type"":""address""},{""internalType"":""uint256"",""name"":""amount"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""from"",""type"":""address""},{""internalType"":""address"",""name"":""to"",""type"":""address""},{""internalType"":""uint256"",""name"":""amount"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""}]";

        // Standard ERC20 token contract bytecode
        private const string ERC20_BYTECODE = "0x60806040523480156200001157600080fd5b506040516200155838038062001558833981810160405281019062000037919062000381565b8360036200004791906200058f565b5082600490805190602001906200005f92919062000190565b508160068190555080600560006101000a81548160ff021916908360ff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866200010281906200062d565b604051620001119190620006a2565b60405180910390a35060016000808282546200012e91906200067e565b925050819055508060ff1660065461ffff1662000174600560009054906101000a900460ff1662000158919062000744565b6200016e91906200067e565b106200018057600080fd5b5050505062000842565b6200018d818362000187565b5050565b8280546200019e9062000796565b90600052602060002090601f016020900481019282620001c257600085556200020e565b82601f10620001dd57805160ff19168380011785556200020e565b828001600101855582156200020e579182015b828111156200020d578251825591602001919060010190620001f0565b5b5090506200021d919062000221565b5090565b5b808211156200023c57600081600090555060010162000222565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200029e8262000253565b810181811067ffffffffffffffff82111715620002c057620002bf62000264565b5b80604052505050565b6000620002d562000240565b9050620002e38282620002cb565b919050565b600067ffffffffffffffff82111562000306576200030562000264565b5b620003118262000253565b9050602081019050919050565b60005b838110156200033e5780820151818401526020810190506200032c565b838111156200033f576000848401525b50505050565b60006200035c6200035684620002e8565b620002b9565b9050828152602081018484840111156200037b576200037a6200024e565b5b6200038884828562000311565b509392505050565b6000815190506200038c8162000828565b92915050565b600082601f830112620003aa57620003a962000249565b5b8151620003bc84826020860162000345565b91505092915050565b6000819050919050565b620003da81620003c5565b8114620003e657600080fd5b50565b600081519050620003fa81620003cf565b92915050565b600060ff82169050919050565b6200041781620004f2565b81146200042357600080fd5b50565b600081519050620004378162000400565b92915050565b600080600080608085870312156200045a5762000459620003f0565b5b600085015167ffffffffffffffff8111156200047b576200047a620003f5565b5b6200048987828801620003fa565b945050602085015167ffffffffffffffff811115620004ad57620004ac620003f5565b5b620004bb87828801620003fa565b9350506040620004ce87828801620003e9565b9250506060620004e187828801620004e4565b91505092959194509250565b600081519050620004fc81620003af565b92915050565b600081915050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082821c905092915050565b600062000561600019846200054a565b1980831691505092915050565b60006200057c83836200054e565b9150826002028217905092915050565b6200059a8262000503565b67ffffffffffffffff811115620005b457620005b362000518565b5b620005c082546200079a565b620005cc82828562000568565b6000601f831160018114620006035760008415620005ee578287015190505b620005fa85826200057a565b86555063ffffffff841115620006215762000620620006f9565b5b505050506200063382848262000728565b50505b505050565b620006388162000670565b82525050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200067d82620003c5565b9050919050565b6000620006958262000633565b9150620006a28362000633565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620006d957620006d862000645565b5b828201905092915050565b82818337600083830152505050565b600060028204905060018216801515620007125760018114620007285762000727620006f9565b5b60ff166020036101000a021c160192915050565b60005b83811015620007485780820151818401526020810190506200072b565b8381111562000758576000848401525b50505050565b60006200076b600019846200054a565b60010192915050565b6000620007868260ff166200077462000633565b620003f0565b9050919050565b600062000793826200063c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620007c657620007c562000647565b5b600182019050919050565b600060ff82169050919050565b60006020601f8301049050919050565b6000819050919050565b600060009054906101000a900460ff1690565b60008160300c8460070b83600019018560070b0190509392505050565b60008154905090565b620008338162000406565b81146200083f57600080fd5b50565b610d9080620008526000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806370a082311161007657806370a082311461017557806395d89b41146101a5578063a457c2d7146101c3578063a9059cbb146101f3578063d471f40814610223578063dd62ed3e14610241576100be565b806301ffc9a7146100c357806306fdde03146100f3578063095ea7b31461011157806318160ddd1461014157806323b872dd1461015f578063313ce56714610161575b600080fd5b6100dd60048036038101906100d89190610969565b610271565b6040516100ea9190610a04565b60405180910390f35b6100fb6102bc565b6040516101089190610a2a565b60405180910390f35b61012b60048036038101906101269190610a7b565b61034e565b6040516101389190610a04565b60405180910390f35b610149610371565b6040516101569190610ad6565b60405180910390f35b61017361016e9190610969565b610377565b005b61018f600480360381019061018a9190610af1565b6103c8565b60405161019c9190610ad6565b60405180910390f35b6101ad610410565b6040516101ba9190610a2a565b60405180910390f35b6101dd60048036038101906101d89190610a7b565b6104a2565b6040516101ea9190610a04565b60405180910390f35b61020d60048036038101906102089190610a7b565b610519565b60405161021a9190610a04565b60405180910390f35b61022b61053c565b6040516102389190610b2d565b60405180910390f35b61025b60048036038101906102569190610b48565b610551565b6040516102689190610ad6565b60405180910390f35b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614159150509392505050565b6060600380546102cb90610bb7565b80601f01602080910402602001604051908101604052809291908181526020018280546102f790610bb7565b80156103445780601f1061031957610100808354040283529160200191610344565b820191906000526020600020905b81548152906001019060200180831161032757829003601f168201915b5050505050905090565b600061036761035b6105d8565b84846105e0565b6001905092915050565b60005481565b600063ffffffff169050600060037fff000000000000000000000000000000000000000000000000000000000000000160e01c1690509050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054610423906106b7565b80601f016020809104026020016040519081016040528092919081815260200182805461044f906106b7565b801561049c5780601f106104715761010080835404028352916020019161049c565b820191906000526020600020905b81548152906001019060200180831161047f57829003601f168201915b5050505050905090565b6000806104ad6105d8565b905060006104bb8286610551565b9050818110156104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f3906108a3565b60405180910390fd5b61050d82866105098685610aa9565b6105e0565b60019250505092915050565b6000610532610526610522610377565b610537565b92915050565b600090565b60055460ff1681565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505b92915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610650576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610647906107e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b7906107a1565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107ae9190610ad6565b60405180910390a3505050565b6000819050919050565b600082825260208201905092915050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061078b602283610724565b915061079682610735565b604082019050919050565b600060208201905081810360008301526107ba8161077e565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006108216082610724565b915061082c826107bb565b604082019050919050565b6000602082019050818103600083015261085081610808565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006108db602083610724565b91506108e682610857565b602082019050919050565b6000602082019050818103600083015261090a816108ce565b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61093681610923565b811461094157600080fd5b50565b6000813590506109538161092d565b92915050565b60008115159050919050565b61096e81610959565b811461097957600080fd5b50565b60008135905061098b81610965565b92915050565b6109a281610959565b82525050565b60006020828403121561099d576109e2610911565b5b60006109ee848285016109ea565b91505092915050565b60006020828403121561099e5761099d610911565b5b60006109ef84828501610944565b91505092915050565b60006020828403121561098a5761098d610911565b5b600061098a8482850161097c565b600060208201905061068360008301846109ce565b60008160601b9050919050565b600082825260208201905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610704578082015181840152602081019050610ad6565b83811115610a02576000848401525b50505050565b60006020820190506107b660008301846109d5565b600060208201905081810360008301526107fe816107e1565b9050919050565b600060208201905081810360008301526107fe81610821565b6000602082019050610a5f60008301846106db565b92915050565b60008060408385031215610a7657610a75610911565b5b6000610a8485828601610944565b9250506020610a9585828601610944565b9150509250929050565b6000819050919050565b6000610aae82610aa3565b9150610ab983610aa3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610aee57610aed610969565b5b828201905092915050565b600060208284031215610b0757610b06610911565b5b6000610b1584828501610944565b91505092915050565b6000819050919050565b610b3181610b1f565b82525050565b6000602082019050610b4c6000830184610b28565b92915050565b60008060408385031215610b5f57610b5e610911565b5b6000610b6d85828601610944565b9250506020610b7e85828601610944565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bcf57607f821691505b602082108103610be257610be1610b88565b5b5091905056fea26469706673582212208296abe45c5dd860c95034f4447167f13be61c84ca049ee78b33188dc31c9b3664736f6c63430008090033";

        public TokenService(IOptions<BlockchainConfig> config, ILogger<TokenService> logger)
        {
            _config = config.Value;
            _logger = logger;
        }

        public async Task<TokenDeploymentResponse> DeployTokenAsync(TokenDeploymentRequest request)
        {
            var response = new TokenDeploymentResponse { Success = false };
            
            try
            {
                // Create an account with the provided private key
                var account = new Account(request.DeployerPrivateKey, _config.ChainId);
                
                // Connect to the Base blockchain
                var web3 = new Web3(account, _config.BaseRpcUrl);
                
                // Calculate token supply with decimals
                var initialSupply = request.InitialSupply * (decimal)Math.Pow(10, request.Decimals);
                var initialSupplyBigInteger = new BigInteger(Convert.ToDecimal(initialSupply));
                
                // Deploy the token contract
                var deploymentInput = new
                {
                    ByteCode = ERC20_BYTECODE,
                    Name = request.Name,
                    Symbol = request.Symbol,
                    InitialSupply = initialSupplyBigInteger,
                    Decimals = (byte)request.Decimals
                };
                
                // Deploy contract with constructor parameters
                var transactionInput = new TransactionInput
                {
                    From = account.Address,
                    Gas = new HexBigInteger(_config.GasLimit),
                    Data = ERC20_BYTECODE
                };
                
                // Deploy the contract
                var receipt = await web3.Eth.DeployContract.SendRequestAndWaitForReceiptAsync(
                    ERC20_ABI,
                    ERC20_BYTECODE,
                    account.Address,
                    new HexBigInteger(_config.GasLimit),
                    null, // No ETH value being sent
                    request.Name,
                    request.Symbol,
                    initialSupplyBigInteger,
                    (byte)request.Decimals);
                
                // Populate the response
                response.TransactionHash = receipt.TransactionHash;
                response.ContractAddress = receipt.ContractAddress;
                response.Success = true;
                
                _logger.LogInformation("Token {Symbol} deployed at address {Address}", 
                    request.Symbol, receipt.ContractAddress);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deploying ERC20 token: {Message}", ex.Message);
                response.ErrorMessage = ex.Message;
            }
            
            return response;
        }
    }
}