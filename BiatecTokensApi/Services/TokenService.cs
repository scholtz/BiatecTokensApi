using System.Numerics;
using BiatecTokensApi.Configuration;
using BiatecTokensApi.Models;
using Microsoft.Extensions.Options;
using Nethereum.Contracts;
using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;

namespace BiatecTokensApi.Services
{
    public class TokenService : ITokenService
    {
        private readonly BlockchainConfig _config;
        private readonly ILogger<TokenService> _logger;

        // Simple ERC20 token contract ABI for testing
        private const string ERC20_ABI = @"[{""inputs"":[{""internalType"":""string"",""name"":""name_"",""type"":""string""},{""internalType"":""string"",""name"":""symbol_"",""type"":""string""},{""internalType"":""uint256"",""name"":""initialSupply"",""type"":""uint256""},{""internalType"":""uint8"",""name"":""decimals_"",""type"":""uint8""}],""stateMutability"":""nonpayable"",""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":true,""internalType"":""address"",""name"":""owner"",""type"":""address""},{""indexed"":true,""internalType"":""address"",""name"":""spender"",""type"":""address""},{""indexed"":false,""internalType"":""uint256"",""name"":""value"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""internalType"":""address"",""name"":""from"",""type"":""address""},{""indexed"":true,""internalType"":""address"",""name"":""to"",""type"":""address""},{""indexed"":false,""internalType"":""uint256"",""name"":""value"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""inputs"":[{""internalType"":""address"",""name"":""owner"",""type"":""address""},{""internalType"":""address"",""name"":""spender"",""type"":""address""}],""name"":""allowance"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""spender"",""type"":""address""},{""internalType"":""uint256"",""name"":""amount"",""type"":""uint256""}],""name"":""approve"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""account"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""name"":""decimals"",""outputs"":[{""internalType"":""uint8"",""name"":"""",""type"":""uint8""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""name"":""name"",""outputs"":[{""internalType"":""string"",""name"":"""",""type"":""string""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""name"":""symbol"",""outputs"":[{""internalType"":""string"",""name"":"""",""type"":""string""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""name"":""totalSupply"",""outputs"":[{""internalType"":""uint256"",""name"":"""",""type"":""uint256""}],""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""to"",""type"":""address""},{""internalType"":""uint256"",""name"":""amount"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""},{""inputs"":[{""internalType"":""address"",""name"":""from"",""type"":""address""},{""internalType"":""address"",""name"":""to"",""type"":""address""},{""internalType"":""uint256"",""name"":""amount"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[{""internalType"":""bool"",""name"":"""",""type"":""bool""}],""stateMutability"":""nonpayable"",""type"":""function""}]";

        // Simple working ERC20 token contract bytecode
        private const string ERC20_BYTECODE = "0x608060405234801561001057600080fd5b50604051610c77380380610c7783398101604052810190610030919061035e565b83600390816100409190610629565b5082600490816100509190610629565b50816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160028190555080600560006101000a81548160ff021916908360ff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161011491906106fa565b60405180910390a35050505061071b565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61017082610137565b810181811067ffffffffffffffff8211171561018f5761018e610148565b5b80604052505050565b60006101a261011e565b90506101ae8282610167565b919050565b600067ffffffffffffffff8211156101ce576101cd610148565b5b6101d782610137565b9050602081019050919050565b60005b838110156102025780820151818401526020810190506101e7565b60008484015250505050565b600061022161021c846101b3565b610198565b90508281526020810184848401111561023d5761023c610132565b5b6102488482856101e4565b509392505050565b600082601f8301126102655761026461012d565b5b815161027584826020860161020e565b91505092915050565b6000819050919050565b6102918161027e565b811461029c57600080fd5b50565b6000815190506102ae81610288565b92915050565b600060ff82169050919050565b6102ca816102b4565b81146102d557600080fd5b50565b6000815190506102e7816102c1565b92915050565b600080600080608085870312156103075761030661012b565b5b600085015167ffffffffffffffff81111561032557610324610130565b5b61033187828801610250565b945050602085015167ffffffffffffffff81111561035257610351610130565b5b61035e87828801610250565b93505060406103748782880161029f565b9250506060610385878288016102d8565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103e357607f821691505b6020821081036103f6576103f561039c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261045e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610421565b6104688683610421565b95508019841693508086168417925050509392505050565b6000819050919050565b60006104a56104a061049b8461027e565b610480565b61027e565b9050919050565b6000819050919050565b6104bf8361048a565b6104d36104cb826104ac565b84845461042e565b825550505050565b600090565b6104e86104db565b6104f38184846104b6565b505050565b5b81811015610517576105026000826104e0565b6001810190506104f9565b5050565b601f82111561055c5761052d816103fc565b61053684610411565b81016020851015610545578190505b61055961055185610411565b8301826104f8565b50505b505050565b600082821c905092915050565b600061057f60001984600802610561565b1980831691505092915050565b6000610598838361056e565b9150826002028217905092915050565b6105b182610391565b67ffffffffffffffff8111156105ca576105c9610148565b5b6105d482546103cb565b6105df82828561051b565b600060209050601f831160018114610612576000841561060057829003601f168261ffff565b1982019150606002820160405250610638565b82601f106106235782601f168201915b808910156106405784890151825560018201915060208501945060208101905061062b565b868310156106485784890151600019601f8916165580830215906000850390505b6001600288020188555050505b505050505050565b61065b8161027e565b82525050565b60006020820190506106766000830184610652565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106a78261067c565b9050919050565b6106b78161069c565b82525050565b60006020820190506106d260008301846106ae565b92915050565b600081519050919050565b600082825260208201905092915050565b60006107008382826106d8565b916107088261067c565b60005b8381101561072857808201518184015260208101905061070b565b60008484015250505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b61076881610734565b82525050565b6000602082019050610783600083018461075f565b92915050565b610544806107986000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a08231146100e957806395d89b4114610119578063a9059cbb14610137578063dd62ed3e1461016757600080fd5b806306fdde031461008d57806318160ddd146100ab57806323b872dd146100c9578063313ce567146100f9575b600080fd5b610095610197565b6040516100a291906103cd565b60405180910390f35b6100b3610229565b6040516100c091906103ef565b60405180910390f35b6100e360048036038101906100de919061040a565b61022f565b6040516100f0919061045d565b60405180910390f35b6101076102d4565b6040516101149190610478565b60405180910390f35b6101216102e7565b60405161012e91906103cd565b60405180910390f35b610151600480360381019061014c9190610493565b610379565b60405161015e919061045d565b60405180910390f35b610181600480360381019061017c91906104d3565b610466565b60405161018e91906103ef565b60405180910390f35b6060600380546101a690610513565b80601f01602080910402602001604051908101604052809291908181526020018280546101d290610513565b801561021f5780601f106101f45761010080835404028352916020019161021f565b820191906000526020600020905b81548152906001019060200180831161020257829003601f168201915b5050505050905090565b60025481565b60006102426102478560045b81526020016000200154905090565b61023e8161027861030e565b1161028357600080fd5b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190509392505050565b600560009054906101000a900460ff1681565b60606004805461031c90610513565b80601f016020809104026020016040519081016040528092919081815260200182805461034890610513565b80156103955780601f1061036a57610100808354040283529160200191610395565b820191906000526020600020905b81548152906001019060200180831161037857829003601f168201915b5050505050905090565b60006103a66103af6104ed565b600190509392505050565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000819050919050565b6000819050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561046757808201518184015260208101905061044c565b60008484015250505050565b6000601f19601f8301169050919050565b600061048f8261042d565b6104998185610438565b93506104a9818560208601610449565b6104b281610472565b840191505092915050565b600060208201905081810360008301526104d78184610484565b905092915050565b6104e881610421565b82525050565b600060208201905061050360008301846104df565b92915050565b60008115159050919050565b61051e81610509565b82525050565b60006020820190506105396000830184610515565b92915050565b600060ff82169050919050565b6105558161053f565b82525050565b6000602082019050610570600083018461054c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105a182610576565b9050919050565b6105b181610596565b81146105bc57600080fd5b50565b6000813590506105ce816105a8565b92915050565b6105dd81610421565b81146105e857600080fd5b50565b6000813590506105fa816105d4565b92915050565b6000806040838503121561061757610616610571565b5b6000610625858286016105bf565b9250506020610636858286016105eb565b9150509250929050565b60008060006060848603121561065957610658610571565b5b6000610667868287016105bf565b9350506020610678868287016105bf565b9250506040610689868287016105eb565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106da57607f821691505b6020821081036106ed576106ec610693565b5b50919050565b6000606082019050610708600083018661047f565b610715602083018561047f565b610722604083018461047f565b949350505050565b6000819050919050565b6107456107408261053f565b61072a565b82525050565b60008160001c9050919050565b600068010000000000000000820290506000601f19601f83011690508083179250505092915050565b600061078c8261074b565b915061079a8560ff1661075a565b91506107a8828460ff16610734565b91505092915050565b6107ba81610596565b82525050565b60006020820190506107d560008301846107b1565b92915050565b60006107e68261053f565b91506107f183610596565b92505080821015610805576108046107ec565b5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108458261053f565b915061085083610596565b92505082820190508082111561086957610868610826565b5b92915050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006108cb602583610438565b91506108d68261086f565b604082019050919050565b600060208201905081810360008301526108fa816108be565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061095d602383610438565b915061096882610901565b604082019050919050565b6000602082019050818103600083015261098c81610950565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006109ef602683610438565b91506109fa82610993565b604082019050919050565b60006020820190508181036000830152610a1e816109e2565b905091905056fea2646970667358221220c2f2de3c4c3b3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f64736f6c63430008140033";

        public TokenService(IOptions<BlockchainConfig> config, ILogger<TokenService> logger)
        {
            _config = config.Value;
            _logger = logger;
        }

        public async Task<TokenDeploymentResponse> DeployTokenAsync(TokenDeploymentRequest request)
        {
            var response = new TokenDeploymentResponse { Success = false };
            
            try
            {
                // Create an account with the provided private key
                var account = new Account(request.DeployerPrivateKey, _config.ChainId);
                
                // Connect to the blockchain
                var web3 = new Web3(account, _config.BaseRpcUrl);
                
                // Calculate token supply with decimals (convert to BigInteger properly)
                var decimalMultiplier = BigInteger.Pow(10, request.Decimals);
                var initialSupplyBigInteger = new BigInteger(request.InitialSupply) * decimalMultiplier;
                
                _logger.LogInformation("Deploying token {Name} ({Symbol}) with supply {Supply} and {Decimals} decimals", 
                    request.Name, request.Symbol, request.InitialSupply, request.Decimals);
                
                // Deploy the contract with proper constructor parameters
                var receipt = await web3.Eth.DeployContract.SendRequestAndWaitForReceiptAsync(
                    ERC20_ABI,
                    ERC20_BYTECODE,
                    account.Address,
                    new HexBigInteger(_config.GasLimit),
                    null, // No ETH value being sent
                    request.Name,
                    request.Symbol,
                    initialSupplyBigInteger,
                    (byte)request.Decimals);
                
                // Check if deployment was successful
                if (receipt?.Status?.Value == 1 && !string.IsNullOrEmpty(receipt.ContractAddress))
                {
                    response.TransactionHash = receipt.TransactionHash;
                    response.ContractAddress = receipt.ContractAddress;
                    response.Success = true;
                    
                    _logger.LogInformation("Token {Symbol} deployed successfully at address {Address}", 
                        request.Symbol, receipt.ContractAddress);
                }
                else
                {
                    response.ErrorMessage = "Contract deployment failed - transaction reverted or no contract address received";
                    _logger.LogError("Token deployment failed: {Error}", response.ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deploying ERC20 token: {Message}", ex.Message);
                response.ErrorMessage = ex.Message;
            }
            
            return response;
        }
    }
}